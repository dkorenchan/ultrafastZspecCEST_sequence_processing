% procOptionsGUI: Creates a graphical user interface where the user can
% specify processing options for z-spectral data, fitting, etc.
%
%   INPUTS:     NONE
%
%   OUTPUTS:    
%       procflgs    -   Struct containing values of logical flags for
%                       data processing options
%       params      -   Struct containing numerical/string processing 
%                       parameters
%
function [procflgs,params]=procOptionsGUI
% Initialize default settings for GUI to display when loaded
[procflgs,params]=initializeGUIdefaults;
flgnames = fieldnames(procflgs);

paramfig = uifigure('Name','Ultrafast z-spectroscopy: processing parameters');
paramfig.Position(4) = 600;

uicheckbox(paramfig,'Position',[20 555 800 20],'Tag','override',...
    'Value',procflgs.override,'ValueChangedFcn',@toggleFlag,...
    'Text','Override a parameter read from the data files (set to Inf to use default)');
% Items in this buttongroup disappear/reappear based upon procflgs.override
ui.override.bgrp = uibuttongroup(paramfig,'Position',[40 525 520 30],...
    'Visible',procflgs.override,'SelectionChangedFcn',@changeButton);
ui.override.pw90set = uieditfield(ui.override.bgrp,'numeric','Position',[10 5 50 20],...
    'Tag','pw90','Value',params.pw90,'ValueChangedFcn',@setParam);
ui.override.pw90lab = uilabel(ui.override.bgrp,'Position',[65 5 500 20],...
    'Text','90 degree pulse width (us)');

uicheckbox(paramfig,'Position',[20 500 800 20],'Tag','topproc',...
    'Value',procflgs.topproc,'ValueChangedFcn',@toggleFlag,...
    'Text','Load in z-spectra already processsed in TopSpin');
% Items in this buttongroup disappear/reappear based upon procflgs.topproc
ui.topproc.bgrp = uibuttongroup(paramfig,'Position',[40 420 520 80],...
    'Visible',~procflgs.topproc,'SelectionChangedFcn',@changeButton);
ui.topproc.zfset = uieditfield(ui.topproc.bgrp,'numeric','Position',[10 50 50 20],'Tag','zf',...
    'Value',params.zf,'ValueChangedFcn',@setParam);
ui.topproc.zflab = uilabel(ui.topproc.bgrp,'Position',[65 50 500 20],...
    'Text','Zerofilling factor (integer value >0)');
ui.topproc.filterlab = uilabel(ui.topproc.bgrp,'Position',[10 30 100 20],...
    'Text','FID filter type:');
ui.topproc.expset = uiradiobutton(ui.topproc.bgrp,'Position',[110 30 100 20],...
    'Value',strcmp(params.filter,'exponential'),'Text','Exponential',...
    'Parent',ui.topproc.bgrp);
ui.topproc.exp.apset = uieditfield(ui.topproc.bgrp,'numeric','Tag','ap',...
    'Position',[110 10 50 20],'Visible',strcmp(params.filter,'exponential'),...
    'Value',params.ap,'ValueChangedFcn',@setParam);
ui.topproc.exp.aplab = uilabel(ui.topproc.bgrp,'Position',[165 10 600 20],...
    'Visible',strcmp(params.filter,'gaussian'),...
    'Text','Exponential decay constant (Hz)','Visible',strcmp(params.filter,'exponential'));
ui.topproc.gaussset = uiradiobutton(ui.topproc.bgrp,'Position',[220 30 100 20],...
    'Value',strcmp(params.filter,'gaussian'),'Text','Gaussian',...
    'Parent',ui.topproc.bgrp);
ui.topproc.gauss.edgeset = uieditfield(ui.topproc.bgrp,'numeric','Tag','edge',...
    'Position',[110 10 50 20],'Visible',strcmp(params.filter,'gaussian'),...
    'Value',params.edge,'ValueChangedFcn',@setParam);
ui.topproc.gauss.edgelab = uilabel(ui.topproc.bgrp,'Position',[160 10 600 20],...
    'Visible',strcmp(params.filter,'gaussian'),...
    'Text','Gaussian filter attenuation at FID endpoints (dB)');

uilabel(paramfig,'Position',[20 392 800 20],...
    'Text','Window size for displaying z-spectra (+/- ppm):');
uieditfield(paramfig,'numeric','Position',[280 392 40 20],...
    'Tag','ppmwdw','Value',params.ppmwdw,'ValueChangedFcn',@setParam);

uicheckbox(paramfig,'Position',[20 370 800 20],'Tag','norm',...
    'Value',procflgs.norm,'ValueChangedFcn',@toggleFlag,...
    'Text','Normalize z-spectra across all saturation B1 values');
% Items in this buttongroup disappear/reappear based upon procflgs.norm
ui.norm.bgrp = uibuttongroup(paramfig,'Position',[40 310 520 60],...
    'Visible',procflgs.norm,'SelectionChangedFcn',@changeButton);
ui.norm.nosatset = uiradiobutton(ui.norm.bgrp,'Position',[10 30 600 20],...
    'Value',strcmp(params.normtype,'nosatfit'),'Parent',ui.norm.bgrp,...
    'Text',['Use non-saturated spectrum scaling + clustering to scale '...
    'raw spectra + calculate z-spectra']);
ui.norm.ppmvalset = uiradiobutton(ui.norm.bgrp,'Position',[10 10 400 20],...
    'Value',strcmp(params.normtype,'ppmval'),'Parent',ui.norm.bgrp,...
    'Text','Scale all raw spectra to be equal at this ppm value:');
ui.norm.pnset = uieditfield(ui.norm.bgrp,'numeric','Position',[310 10 40 20],...
    'Tag','ppmnorm','Value',params.ppmnorm,'ValueChangedFcn',@setParam,...
    'Enable',strcmp(params.normtype,'ppmval'));

uicheckbox(paramfig,'Position',[20 280 800 20],'Tag','peakfit',...
    'Value',procflgs.peakfit,'ValueChangedFcn',@toggleFlag,...
    'Text','Use multi-pool lineshape fitting, rather than MTR asymmetry, for QUESP analysis');
% Items in this buttongroup disappear/reappear based upon procflgs.peakfit
ui.peakfit.bgrp = uibuttongroup(paramfig,'Position',[40 40 520 240],...
    'Visible',procflgs.peakfit,'SelectionChangedFcn',@changeButton);
ui.peakfit.poollab = uilabel(ui.peakfit.bgrp,'Position',[10 220 400 20],...
    'Text','Pools to fit (water always included):');
ui.peakfit.poolamide = uicheckbox(ui.peakfit.bgrp,'Position',[220 220 100 20],...
    'Tag','amide','Value',sum(strcmp(params.pools,'amide')),...
    'ValueChangedFcn',@setPools,'Text','amide');
ui.peakfit.poolamine = uicheckbox(ui.peakfit.bgrp,'Position',[320 220 100 20],...
    'Tag','amine','Value',sum(strcmp(params.pools,'amine')),...
    'ValueChangedFcn',@setPools,'Text','amine');
ui.peakfit.poolOH = uicheckbox(ui.peakfit.bgrp,'Position',[420 220 100 20],...
    'Tag','OH','Value',sum(strcmp(params.pools,'OH')),...
    'ValueChangedFcn',@setPools,'Text','OH');
ui.peakfit.poolTrp = uicheckbox(ui.peakfit.bgrp,'Position',[220 200 100 20],...
    'Tag','Trp','Value',sum(strcmp(params.pools,'Trp')),...
    'ValueChangedFcn',@setPools,'Text','Trp');
ui.peakfit.poolppm4pt4 = uicheckbox(ui.peakfit.bgrp,'Position',[320 200 100 20],...
    'Tag','ppm4pt4','Value',sum(strcmp(params.pools,'ppm4pt4')),...
    'ValueChangedFcn',@setPools,'Text','4.4 ppm');
ui.peakfit.poolppm7pt3 = uicheckbox(ui.peakfit.bgrp,'Position',[420 200 100 20],...
    'Tag','ppm7pt3','Value',sum(strcmp(params.pools,'ppm7pt3')),...
    'ValueChangedFcn',@setPools,'Text','7.3 ppm');
ui.peakfit.poolppm9pt8 = uicheckbox(ui.peakfit.bgrp,'Position',[220 180 100 20],...
    'Tag','ppm9pt8','Value',sum(strcmp(params.pools,'ppm9pt8')),...
    'ValueChangedFcn',@setPools,'Text','9.8 ppm');
ui.peakfit.poolNOE = uicheckbox(ui.peakfit.bgrp,'Position',[320 180 100 20],...
    'Tag','NOE','Value',sum(strcmp(params.pools,'NOE')),...
    'ValueChangedFcn',@setPools,'Text','rNOE');
ui.peakfit.poolMT = uicheckbox(ui.peakfit.bgrp,'Position',[420 180 100 20],...
    'Tag','MT','Value',sum(strcmp(params.pools,'MT')),...
    'ValueChangedFcn',@setPools,'Text','MT');
ui.peakfit.peaktypelab = uilabel(ui.peakfit.bgrp,'Position',[10 160 80 20],...
    'Text','Peak fit type:');
ui.peakfit.Lorentzset = uiradiobutton(ui.peakfit.bgrp,'Position',[210 160 90 20],...
    'Value',strcmp(params.peaktype,'Lorentzian'),'Text','Lorentzian',...
    'Parent',ui.peakfit.bgrp);
ui.peakfit.PseudoVoigtset = uiradiobutton(ui.peakfit.bgrp,'Position',[100 160 90 20],...
    'Value',strcmp(params.peaktype,'Pseudo-Voigt'),'Text','Pseudo-Voigt',...
    'Parent',ui.peakfit.bgrp);
ui.peakfit.PVcharconstr = uicheckbox(ui.peakfit.bgrp,'Position',[100 140 450 20],...
    'Visible',strcmp(params.peaktype,'Pseudo-Voigt'),'Tag','PVcharconstr',...
    'Value',procflgs.PVcharconstr,'ValueChangedFcn',@toggleFlag,...
    'Text','Keep Gaussian-Lorentzian character same across all peaks (except water + MT)');
ui.peakfit.water1st = uicheckbox(ui.peakfit.bgrp,'Position',[10 120 600 20],'Tag','water1st',...
    'Value',procflgs.water1st,'ValueChangedFcn',@toggleFlag,...
    'Text','Fit water (and rNOE/MT, if specified) first, using negative ppm values');
ui.peakfit.fixset = uicheckbox(ui.peakfit.bgrp,'Position',[10 100 600 20],'Tag','fix',...
    'Value',procflgs.fix,'ValueChangedFcn',@toggleFlag,...
    'Text','Fit lineshape offsets for selected z-spectrum only, then use for all other spectra');
ui.peakfit.fixind = uieditfield(ui.peakfit.bgrp,'numeric',...
    'Position',[30 80 50 20],'Tag','fixind','Visible',procflgs.fix,...
    'Value',params.fixind,'ValueChangedFcn',@setParam);
ui.peakfit.fixlab = uilabel(ui.peakfit.bgrp,'Position',[90 80 400 20],...
    'Visible',procflgs.fix,'Text','Spectrum index to use to fix peak offsets');
ui.peakfit.ppmwt = uicheckbox(ui.peakfit.bgrp,'Position',[10 60 600 20],'Tag','ppmwt',...
    'Value',procflgs.ppmwt,'ValueChangedFcn',@toggleFlag,...
    'Text','Focus fitting on a specific ppm value (e.g. for a small peak)');
ui.peakfit.ppmwtset = uieditfield(ui.peakfit.bgrp,'text',...
    'Position',[30 30 90 20],'Tag','ppmwt','Visible',procflgs.ppmwt,...
    'Value',params.ppmwt,'ValueChangedFcn',@setParam);
ui.peakfit.ppmwtlab = uilabel(ui.peakfit.bgrp,'Position',[130 20 350 40],...
    'Visible',procflgs.ppmwt,'WordWrap','on', ...
    'Text',['Spectral ppm value(s) to focus on while fitting, separated by '...
    'commas or semicolons']);
ui.peakfit.MTsuperLorentz = uicheckbox(ui.peakfit.bgrp,'Position',[10 0 450 20],...
    'Enable',sum(strcmp(params.pools,'MT')),'Tag','MTsuperLorentz',...
    'Value',procflgs.MTsuperLorentz,'ValueChangedFcn',@toggleFlag,...
    'Text','Use super-Lorentzian lineshape for MT pool');

uibutton(paramfig,'Position',[120 10 300 20],'Text','Continue',...
    'ButtonPushedFcn',@endParamSet);
waitfor(paramfig);

% Display parameter settings based on GUI selections
displayGUIselections(procflgs,params);

% Adjust relevant parameters based upon settings
if ~procflgs.ppmwt %no ppm value to focus fitting on
    params.ppmwt = NaN;
else
    params.ppmwt = str2num(params.ppmwt); %convert to numeric array
end


%% INTERNAL CALLBACK FUNCTIONS FOR UI ELEMENTS
%
% toggleFlag: changes value of processing flag + interactive ability of 
% other parameter settings based upon checkbox value
function toggleFlag(src,~)
% Change flag value
procflgs.(src.Tag) = ~procflgs.(src.Tag);
% Change visibility of button groups
for iii = 1:numel(flgnames)
    fnam = flgnames{iii};
    if isfield(ui,fnam)
        if strcmp(fnam,'topproc')
            set(ui.(fnam).bgrp,'Visible',~procflgs.(fnam));
        else
            set(ui.(fnam).bgrp,'Visible',procflgs.(fnam));
        end
    end
end
% Change visibility of other flags
set(ui.peakfit.fixind,'Visible',procflgs.fix);
set(ui.peakfit.fixlab,'Visible',procflgs.fix);
set(ui.peakfit.ppmwtset,'Visible',procflgs.ppmwt);
set(ui.peakfit.ppmwtlab,'Visible',procflgs.ppmwt);
end


% setParam: updates parameter based upon value input in edit field
function setParam(src,~)
params.(src.Tag) = src.Value;    
end


% changeButton: updates button group if new radio button selected
function changeButton(~,~)
% Change value of params.filter based on radio button selection
if ui.topproc.expset.Value
    params.filter='exponential';
elseif ui.topproc.gaussset.Value
    params.filter='gaussian';
end
% Change value of params.normtype based on radio button selection
if ui.norm.nosatset.Value
    params.normtype='nosatfit';
elseif ui.norm.ppmvalset.Value
    params.normtype='ppmval';
end
% Change value of params.peaktype based on radio button selection
if ui.peakfit.Lorentzset.Value
    params.peaktype='Lorentzian';
elseif ui.peakfit.PseudoVoigtset.Value
    params.peaktype='Pseudo-Voigt';
end
% Update visibility of auxiliary parameters
tpfields = {'exp','gauss'};
for iii = 1:numel(tpfields)
    tpf = tpfields{iii};
    tpsubfields = fieldnames(ui.topproc.(tpf));
    for jjj = 1:numel(tpsubfields)
        tpsf = tpsubfields{jjj};
        if strcmp(tpf,'exp')
            set(ui.topproc.(tpf).(tpsf),'Visible',strcmp(params.filter,'exponential'))
        elseif strcmp(tpf,'gauss')
            set(ui.topproc.(tpf).(tpsf),'Visible',strcmp(params.filter,'gaussian'))
        end
    end
end
set(ui.norm.pnset,'Enable',strcmp(params.normtype,'ppmval'));
set(ui.peakfit.PVcharconstr,'Visible',strcmp(params.peaktype,'Pseudo-Voigt'));
end


% setPools: adjusts params.pools to include pools specified in GUI
function setPools(src,~)
% See if pool name already included in params.pools - if there, remove; if
% not there, add
if sum(strcmp(params.pools,src.Tag)) > 0
    params.pools = params.pools(~strcmp(params.pools,src.Tag));
else
    params.pools = [params.pools {src.Tag}];
end
% Also, verify that water is included!
if sum(strcmp(params.pools,'water')) < 1
    params.pools = [{'water'} params.pools];
end
% Reorder based upon basePools, which contains the correct order. Go
% through basePools, find each entry in params.pools, then move to end of 
% params.pools. The result will be params.pools ordered the same as
% basePools! 
basePools={'water','NOE','MT','OH','amine','amide','ppm4pt4','Trp','ppm7pt3',...
    'ppm9pt8'};
for iii=1:numel(basePools)
    params.pools=[params.pools(~strcmp(params.pools,basePools{iii})), ...
        params.pools(strcmp(params.pools,basePools{iii}))];
end

% Change visibility of other flags
if sum(strcmp(params.pools,'MT')) > 0
    set(ui.peakfit.MTsuperLorentz,'Enable',true);
else
    set(ui.peakfit.MTsuperLorentz,'Enable',false);
end
end


% endParamSet: closes parameter setting panel, continues with function
function endParamSet(~,~)
close(paramfig)
end


end